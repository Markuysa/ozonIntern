// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLinksDatabase is a mock of LinksDatabase interface.
type MockLinksDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockLinksDatabaseMockRecorder
}

// MockLinksDatabaseMockRecorder is the mock recorder for MockLinksDatabase.
type MockLinksDatabaseMockRecorder struct {
	mock *MockLinksDatabase
}

// NewMockLinksDatabase creates a new mock instance.
func NewMockLinksDatabase(ctrl *gomock.Controller) *MockLinksDatabase {
	mock := &MockLinksDatabase{ctrl: ctrl}
	mock.recorder = &MockLinksDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinksDatabase) EXPECT() *MockLinksDatabaseMockRecorder {
	return m.recorder
}

// GetURL mocks base method.
func (m *MockLinksDatabase) GetURL(ctx context.Context, link string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockLinksDatabaseMockRecorder) GetURL(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockLinksDatabase)(nil).GetURL), ctx, link)
}

// SaveLink mocks base method.
func (m *MockLinksDatabase) SaveLink(ctx context.Context, url, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLink", ctx, url, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLink indicates an expected call of SaveLink.
func (mr *MockLinksDatabaseMockRecorder) SaveLink(ctx, url, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLink", reflect.TypeOf((*MockLinksDatabase)(nil).SaveLink), ctx, url, link)
}
